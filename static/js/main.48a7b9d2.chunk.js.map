{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","target","num1","num2","num3","num4","num5","num6","bignums","oneBig","bind","twoBig","threeBig","this","setState","Math","floor","random","style","display","onClick","marginRight","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.48a7b9d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {target: 0,\n                  num1: 0,\n                  num2: 0,\n                  num3: 0,\n                  num4: 0,\n                  num5: 0,\n                  num6: 0,\n                  bignums: [25,50,75,100]\n                }\n    this.oneBig = this.oneBig.bind(this);\n    this.twoBig = this.twoBig.bind(this);\n    this.threeBig = this.threeBig.bind(this);\n    this.target = this.target.bind(this);\n  }\n\n  target(){\n    this.setState({\n      target: Math.floor(Math.random() * (999 - 100 + 1)) + 100\n    })\n  }\n\n  oneBig(){\n    this.setState({\n                  num1: this.state.bignums[Math.floor(Math.random() * 4)],\n                  num2: Math.floor(Math.random() * (10 - 1 + 1)) + 1,\n                  num3: Math.floor(Math.random() * (10 - 1 + 1)) + 1,\n                  num4: Math.floor(Math.random() * (10 - 1 + 1)) + 1,\n                  num5: Math.floor(Math.random() * (10 - 1 + 1)) + 1,\n                  num6: Math.floor(Math.random() * (10 - 1 + 1)) + 1\n                })\n\n  }\n  twoBig(){\n    this.setState({\n                  num1: this.state.bignums[Math.floor(Math.random() * 4)],\n                  num2: this.state.bignums[Math.floor(Math.random() * 4)],\n                  num3: Math.floor(Math.random() * (10 - 1 + 1)) + 1,\n                  num4: Math.floor(Math.random() * (10 - 1 + 1)) + 1,\n                  num5: Math.floor(Math.random() * (10 - 1 + 1)) + 1,\n                  num6: Math.floor(Math.random() * (10 - 1 + 1)) + 1\n                })\n\n  }\n  threeBig(){\n    this.setState({\n                  num1: this.state.bignums[Math.floor(Math.random() * 4)],\n                  num2: this.state.bignums[Math.floor(Math.random() * 4)],\n                  num3: this.state.bignums[Math.floor(Math.random() * 4)],\n                  num4: Math.floor(Math.random() * (10 - 1 + 1)) + 1,\n                  num5: Math.floor(Math.random() * (10 - 1 + 1)) + 1,\n                  num6: Math.floor(Math.random() * (10 - 1 + 1)) + 1\n                })\n\n  }\n\n  render(){\n    return(\n      <div>\n        <h2>Your numbers:</h2>\n        <h2 style={{display: \"inline\"}}>|{this.state.num1}|</h2>\n        <h2 style={{display: \"inline\"}}>{this.state.num2}|</h2>\n        <h2 style={{display: \"inline\"}}>{this.state.num3}|</h2>\n        <h2 style={{display: \"inline\"}}>{this.state.num4}|</h2>\n        <h2 style={{display: \"inline\"}}>{this.state.num5}|</h2>\n        <h2 style={{display: \"inline\"}}>{this.state.num6}|</h2>\n        <h2>Your Target: {this.state.target}</h2>\n        <div>\n          <button onClick={this.oneBig} style={{marginRight: 10}}>\n            1 big, 5 small\n          </button>\n          <button onClick={this.twoBig} style={{marginRight: 10}}>\n            2 big, 4 small\n          </button>\n          <button onClick={this.threeBig} style={{marginRight: 10}}>\n            3 big, 3 small\n          </button>\n        </div>\n        <h2></h2>\n        <button onClick={this.target}>\n          Generate Target\n        </button>\n\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}